import json
from schemas import AIQueryResponse

from bson import ObjectId
import redis,logging

logging.basicConfig(
    level=logging.INFO,
    format="%(levelname)s:\t %(asctime)s - %(name)s - %(message)s",
)
logger = logging.getLogger(__name__)
# âœ… Connect to Redis
redis_client = redis.Redis(host="redis", port=6379, db=0, decode_responses=True)

async def get_redis_cache(cache_key):
    return redis_client.get(cache_key)


async def set_redis_cache(cache_key,data,ttl=600):
    json_data = json.dumps(serialize_mongo_data(data))
    return redis_client.setex(cache_key, ttl, json_data)

async def delete_redis_cache(cache_key):
    return redis_client.delete(cache_key)

# ðŸ”¹ Helper Function: Convert ObjectId to string
def serialize_mongo_data(data):
    """Recursively convert MongoDB ObjectId to string for JSON serialization."""
    if isinstance(data, list):
        return [serialize_mongo_data(item) for item in data]
    elif isinstance(data, dict):
        return {key: serialize_mongo_data(value) for key, value in data.items()}
    elif isinstance(data, ObjectId):
        return str(data)  # âœ… Convert ObjectId to string
    else:
        return data

def store_session(user_id, session_id, jwt_token, ttl=3600):
    """Store session in Redis with expiration (1 hour)."""
    redis_client.setex(f"session:{user_id}:{session_id}", ttl, jwt_token)

def send_event(ai_query_response: AIQueryResponse):
    """Creates a redis stream event"""
    # âœ… Flatten the dictionary before sending it to Redis
    event_data = {key: str(value) for key, value in ai_query_response.dict().items()}
    #id as '*' to have an autogenerated id
    redis_client.xadd("preprocess_request", event_data, "*")
    logger.info(f"Received event added: {event_data}")