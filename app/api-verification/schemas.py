from datetime import datetime
from pydantic import BaseModel
from typing import Optional
from enum import Enum


class QueryMetadata(BaseModel):
    """
    A class representing a query metadata inside query model.

    Attributes:
        timestamp (datetime): the timestamp of the query.
        app_id (str): Client app for which this query was made.
        needs_verification (bool): If the query needs verification. Default: True.
    """
    timestamp: Optional[datetime] = None
    app_id: str
    needs_verification: Optional[bool] = True

#Input for preprocessing model
class Query(BaseModel):
    """
    A class representing a query send from the client.

    Attributes:
        id (int): Optional field, it gets it auto generated value assigned when it get processed.
        user_id (str): Id of the user which requested the query.
        session_id (str): Unique id of the session generated by the app when user authenticated via gateway
        metadata (QueryMetadata): Query metadata for the query.
        usercommand (str): Exact user command send as a query to this app.
    """
    id: Optional[int] = None
    user_id: Optional[str] = None
    session_id: Optional[str] = None
    metadata: QueryMetadata
    usercommand: str


# user_command: {
# "app_id" : "example.app",
# "current_user_chat": "Search the amount by Expense."
# }

# [
# 	{"role": "user", "content": "Show me all transaction with $200"},
#   {"role": "assistant", "content": "Are you looking for transactions with an amount of $200 as expenses, income, or both?"},
#   {"role": "user", "content" : "Search the amount by Expense."}
# ]

class ChatMetadata(BaseModel):
    """
    Metadata about a chat history of the client conversation.

    Attributes:
        created_at (datetime): When the chat history was first created.
        last_updated_at (datetime): When the chat history was last updated.
        app_id (str): Client app for which this query was made.
    """
    created_at: datetime
    last_updated_at: datetime
    app_id: str

class UserRole(Enum):
    User = "user"
    Assistant = "assistant"

class ChatData(BaseModel):
    """
    Represents a chat history of the client conversation.

    Attributes:
        id (int): Optional field, it gets it auto generated value same as Query model.
        timestamp (datetime): Id of the user which requested the query.
        role (UserRole): Represents the role of the user.
        usercommand (str): User/Assistant message during their conversation.
    """
    id: Optional[int] = None
    timestamp: Optional[datetime] = None
    role: UserRole
    usercommand: str

class ChatHistory(BaseModel):
    """
    Represents a chat history of the client conversation.

    Attributes:
        user_id (str): Id of the user which requested the query.
        session_id (str): Unique id of the session generated by the app when user authenticated via gateway
        metadata (ChatMetadata): Metadata about the chat history.
        messages (List[ChatMessage]): List of messages representing conversation between client and app.
    """
    user_id: str
    session_id: str
    metadata: ChatMetadata
    messages: list[ChatData]


#Represents a response for a query from a specific AI model
class AIResponse(BaseModel):
    response: str
    model: str

#Input for Verification Service
class QueryResult(Query):
    results: list[AIResponse]

#Output from verification service
#Input to postprocessing service
class AIQueryResponse(Query):
    result: AIResponse
