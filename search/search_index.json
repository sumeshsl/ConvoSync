{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home Page","text":""},{"location":"#code-annotation-examples","title":"Code Annotation Examples","text":""},{"location":"#codeblocks","title":"Codeblocks","text":"<p>some <code>code</code> here</p>"},{"location":"#plain-code-block","title":"Plain code block","text":"<p>A plain code block:</p> <pre><code>Some code here\ndef myfunc()\n//some comment\n</code></pre>"},{"location":"#code-lang","title":"Code lang","text":"<pre><code>import tensorflow as tf\ndef whatever()\n</code></pre>"},{"location":"#with-title","title":"With title","text":"add.py<pre><code>def add(items):\n    for i in range(len(items)):\n        items[i] = items[i]+1;\n</code></pre>"},{"location":"#with-line-numbers","title":"With line numbers","text":"<pre><code>def add(items):\n    for i in range(len(items)):\n        items[i] = items[i]+1;\n</code></pre> <pre><code>def add(items):\n    for i in range(len(items)):\n        items[i] = items[i]+1;\n</code></pre>"},{"location":"#icons-and-emojs","title":"Icons and Emojs","text":""},{"location":"admonitions/","title":"Admonitions","text":"<p>Example of an admonition/callout with a title:</p> <p>Title of the callout</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Collapsible callout:</p> Collapsible callout <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"content-tabs/","title":"Content tabs","text":""},{"location":"content-tabs/#content-tabs","title":"Content Tabs","text":"<p>This is some examples of content tabs.</p>"},{"location":"content-tabs/#generic-content","title":"Generic Content","text":"Plain textUnordered listOrdered list <p>This is some plain text</p> <ul> <li>First item</li> <li>Second item</li> <li>Third item</li> </ul> <ol> <li>First item</li> <li>Second item</li> <li>Third item</li> </ol>"},{"location":"content-tabs/#code-blocks-in-content-tabs","title":"Code Blocks in Content Tabs","text":"PythonJavaScript <pre><code>def main():\n    print(\"Hello world!\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>function main() {\n    console.log(\"Hello world!\");\n}\n\nmain();\n</code></pre>"},{"location":"doc-gateway/","title":"Gateway API","text":"<p>Functions:</p> <ul> <li> <code>create_jwt_token</code>             \u2013              <p>Create a JWT token for user authentication.</p> </li> <li> <code>forward_request</code>             \u2013              <p>Forward request from API Gateway to the target microservice.</p> </li> <li> <code>gateway</code>             \u2013              <p>Generic API Gateway endpoint for forwarding to all microservices.</p> </li> <li> <code>get_user_from_token</code>             \u2013              <p>Dependency to extract and verify user from JWT token.</p> </li> <li> <code>health_check</code>             \u2013              <p>Simple health check endpoint.</p> </li> <li> <code>login</code>             \u2013              <p>Authenticate user and generate JWT token.</p> </li> <li> <code>verify_jwt</code>             \u2013              <p>Verify JWT Token and extract user info.</p> </li> </ul>"},{"location":"doc-gateway/#app.api-gateway.gateway.create_jwt_token","title":"create_jwt_token","text":"<pre><code>create_jwt_token(username)\n</code></pre> <p>Create a JWT token for user authentication. Args:     username: The username for which to create a token Returns:     Dict containing token and expiration info</p>"},{"location":"doc-gateway/#app.api-gateway.gateway.forward_request","title":"forward_request","text":"<pre><code>forward_request(service_name, request, headers)\n</code></pre> <p>Forward request from API Gateway to the target microservice. Args:     service_name: Name of the service to forward to     request: Original FastAPI request     headers: Headers to include in the forwarded request Returns:     JSON response from the microservice</p>"},{"location":"doc-gateway/#app.api-gateway.gateway.gateway","title":"gateway","text":"<pre><code>gateway(service_name, request, user_info=Depends(get_user_from_token))\n</code></pre> <p>Generic API Gateway endpoint for forwarding to all microservices. Args:     service_name: Name of the service to forward to     request: Original request     user_info: User ID and session ID from token Returns:     Response from the microservice</p>"},{"location":"doc-gateway/#app.api-gateway.gateway.get_user_from_token","title":"get_user_from_token","text":"<pre><code>get_user_from_token(credentials=Security(security))\n</code></pre> <p>Dependency to extract and verify user from JWT token. Args:     credentials: HTTP Bearer token credentials Returns:     Tuple of (user_id, session_id)</p>"},{"location":"doc-gateway/#app.api-gateway.gateway.health_check","title":"health_check","text":"<pre><code>health_check()\n</code></pre> <p>Simple health check endpoint.</p>"},{"location":"doc-gateway/#app.api-gateway.gateway.login","title":"login","text":"<pre><code>login(user)\n</code></pre> <p>Authenticate user and generate JWT token. Args:     user: Login credentials Returns:     Token information on successful login Raises:     HTTPException: If credentials are invalid</p>"},{"location":"doc-gateway/#app.api-gateway.gateway.verify_jwt","title":"verify_jwt","text":"<pre><code>verify_jwt(token)\n</code></pre> <p>Verify JWT Token and extract user info. Args:     token: JWT token to verify Returns:     Tuple of (user_id, session_id) Raises:     HTTPException: If token is invalid or expired</p>"},{"location":"doc-postprocessing/","title":"Post processing API","text":"<p>Functions:</p> <ul> <li> <code>request_post_processing</code>             \u2013              <p>POST request post-processing on the AI response to get it validated.</p> </li> <li> <code>websocket_client</code>             \u2013              <p>Processes query response from websocket server in verification server </p> </li> </ul>"},{"location":"doc-postprocessing/#app.api-postprocessing.postprocessing_routes.request_post_processing","title":"request_post_processing","text":"<pre><code>request_post_processing(response)\n</code></pre> <p>POST request post-processing on the AI response to get it validated.</p> <p>Arguments:  </p> <pre><code>response: AI query response that needs to be post-processed.\n</code></pre> <p>Returns:  </p> <pre><code>Processed query with validated results.\n</code></pre>"},{"location":"doc-postprocessing/#app.api-postprocessing.postprocessing_routes.websocket_client","title":"websocket_client","text":"<pre><code>websocket_client()\n</code></pre> <p>Processes query response from websocket server in verification server </p> <p>Returns:  </p> <pre><code>Realtime validated query.\n</code></pre>"},{"location":"doc-preprocessing/","title":"Preprocessing API","text":"<p>Functions:</p> <ul> <li> <code>create_query</code>             \u2013              <p>POST Creates a query request to the server for processing.</p> </li> <li> <code>get_chat_history</code>             \u2013              <p>GET fetches all queries for a specific user session.</p> </li> <li> <code>get_queries</code>             \u2013              <p>GET fetches all queries for a specific user session.</p> </li> <li> <code>get_query</code>             \u2013              <p>GET fetches a queries for a specific user session.</p> </li> <li> <code>serialize_for_json</code>             \u2013              <p>Helper function to serialize objects that aren't JSON serializable by default</p> </li> </ul>"},{"location":"doc-preprocessing/#app.api-preprocessing.preprocessing_routes.create_query","title":"create_query","text":"<pre><code>create_query(query, request, background_tasks)\n</code></pre> <p>POST Creates a query request to the server for processing.</p> <p>Arguments:  </p> <pre><code>query: The query requested.\n</code></pre> <p>Returns:  </p> <pre><code>Processed result of the query.\n</code></pre>"},{"location":"doc-preprocessing/#app.api-preprocessing.preprocessing_routes.get_chat_history","title":"get_chat_history","text":"<pre><code>get_chat_history(request)\n</code></pre> <p>GET fetches all queries for a specific user session.</p> <p>Arguments:  </p> <pre><code>request: Client request for preprocessing.\n</code></pre> <p>Returns:  </p> <pre><code>All the queries for this user.\n</code></pre>"},{"location":"doc-preprocessing/#app.api-preprocessing.preprocessing_routes.get_queries","title":"get_queries","text":"<pre><code>get_queries(request)\n</code></pre> <p>GET fetches all queries for a specific user session.</p> <p>Arguments:  </p> <pre><code>request: Client request for preprocessing.\n</code></pre> <p>Returns:  </p> <pre><code>All the queries for this user.\n</code></pre>"},{"location":"doc-preprocessing/#app.api-preprocessing.preprocessing_routes.get_query","title":"get_query","text":"<pre><code>get_query(query_id)\n</code></pre> <p>GET fetches a queries for a specific user session.</p> <p>Arguments:  </p> <pre><code>response: AI query response that needs to be post-processed.\n</code></pre> <p>Returns:  </p> <pre><code>The query data requested.\n</code></pre>"},{"location":"doc-preprocessing/#app.api-preprocessing.preprocessing_routes.serialize_for_json","title":"serialize_for_json","text":"<pre><code>serialize_for_json(obj)\n</code></pre> <p>Helper function to serialize objects that aren't JSON serializable by default</p>"},{"location":"doc-verification/","title":"Verification API","text":""},{"location":"seq-diagrams/","title":"Diagram Examples","text":""},{"location":"seq-diagrams/#flowcharts","title":"Flowcharts","text":"<pre><code>graph LR\n  A[Start] --&gt; B{Failure?};\n  B --&gt;|Yes| C[Investigate...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Success!];</code></pre>"},{"location":"seq-diagrams/#sequence-diagrams","title":"Sequence Diagrams","text":"<pre><code>sequenceDiagram\n  autonumber\n  Server-&gt;&gt;Terminal: Send request\n  loop Health\n      Terminal-&gt;&gt;Terminal: Check for health\n  end\n  Note right of Terminal: System online\n  Terminal--&gt;&gt;Server: Everything is OK\n  Terminal-&gt;&gt;Database: Request customer data\n  Database--&gt;&gt;Terminal: Customer data</code></pre>"}]}